install.packages("gmodels")
install.packages("pROC")
install.packages("fastDummies")
library(tidyverse)
library(gmodels)
library(psych)
library(car)
library(pROC)
library(fastDummies)
library(randomForest)
library(caret)           # Model training and evaluation
library(umap)            # UMAP dimensionality reduction
library(Rtsne)           # t-SNE dimensionality reduction
library(plotly)          # Interactive 3D plots
library(cluster)         # Clustering and silhouette analysis
library(viridis)         # Color palettes
library(corrplot)        # Correlation visualization
library(factoextra)      # PCA visualization
profumo <- read.csv("final_fra3.csv")
setwd("C:/Users/65963/Desktop/final_xuan")
profumo <- read.csv("final_fra3.csv")
view(profumo)
CrossTable(profumo$Gender_encoded, profumo$price_normalized, expected = TRUE, format = "SPSS")
log.pseudo.r2 <- function(LogModel) {
dev <- LogModel$deviance
nullDev <- LogModel$null.deviance
modelN <- length(LogModel$fitted.values)
R.l <- 1 - dev/nullDev
R.cs <- 1 - exp((dev - nullDev)/modelN)
R.n <- R.cs/(1 - exp(-nullDev/modelN))
cat("Pseudo R^2 for Logistic Regression\n")
cat("Cohen R^2               ", round(R.l, 3), "\n")
cat("Cox and Snell R^2       ", round(R.cs, 3), "\n")
cat("Nagelkerke R^2          ", round(R.n, 3), "\n")
}
train_index <- createDataPartition(profumo$Gender_encoded, p = 0.8, list = FALSE)
train_data <- profumo[train_index, ]
test_data <- profumo[-train_index, ]
train_data <- subset(train_data, Gender_encoded != 2)
train_data$clary_sage_present <- apply(train_data[, grep("base_note_|middle_note_", names(train_data))], 1, function(row) {
any(grepl("clary sage", row, ignore.case = TRUE))
})
train_data$clary_sage_present <- as.numeric(train_data$clary_sage_present)
note_columns <- grep("base_note_|middle_note_", names(train_data), value = TRUE)
train_data$fir_present <- apply(train_data[, note_columns], 1, function(row) {
any(grepl("fir", row, ignore.case = TRUE))
})
train_data$peony_present <- apply(train_data[, note_columns], 1, function(row) {
any(grepl("peony", row, ignore.case = TRUE))
})
train_data$jasmine_sambac_present <- apply(train_data[, note_columns], 1, function(row) {
any(grepl("jasmine sambac", row, ignore.case = TRUE))
})
train_data$fir_present <- as.numeric(train_data$fir_present)
train_data$peony_present <- as.numeric(train_data$peony_present)
train_data$jasmine_sambac_present <- as.numeric(train_data$jasmine_sambac_present)
note_columns <- grep("base_note_|middle_note_", names(train_data), value = TRUE)
train_data$patchouli_present <- apply(train_data[, note_columns], 1, function(row) {
any(grepl("patchouli", row, ignore.case = TRUE))
})
train_data$amber_present <- apply(train_data[, note_columns], 1, function(row) {
any(grepl("amber", row, ignore.case = TRUE))
})
train_data$salwood_present <- apply(train_data[, note_columns], 1, function(row) {
any(grepl("salwood", row, ignore.case = TRUE))
})
train_data$sandalwood_present <- apply(train_data[, note_columns], 1, function(row) {
any(grepl("sandalwood", row, ignore.case = TRUE))
})
train_data$musk_present <- apply(train_data[, note_columns], 1, function(row) {
any(grepl("musk", row, ignore.case = TRUE))
})
note_vars <- c("patchouli_present", "amber_present", "salwood_present", "sandalwood_present", "musk_present")
train_data[note_vars] <- lapply(train_data[note_vars], as.numeric)
perfume_final <- glm(
Gender_encoded ~ price_normalized + scent_strength + notes_diversity + patchouli_present + musk_present + Woody + Floral,
family = binomial,
data = train_data)
summary(perfume_final)
exp(coef(perfume_final))
log.pseudo.r2(perfume_final)
train_data$prob_final <- predict(perfume_final, newdata = train_data, type = "response")
quantile(train_data$prob_final)
train_data <- train_data[!is.na(train_data$prob_final) & !is.nan(train_data$prob_final), ]
train_data$prob_final <- predict(perfume_final, newdata = train_data, type = "response")
quantile(train_data$prob_final)
train_data$Gender_encoded <- factor(train_data$Gender_encoded)
train_data$pred_final <- ifelse(train_data$prob_final > 0.5, 1, 0)
train_data$pred_final <- factor(train_data$pred_final, levels = levels(train_data$Gender_encoded))
names(train_data)
View(train_data)
table(train_data$pred_final)
accur_final <- 1 - mean(train_data$pred_final != train_data$Gender_encoded)
accur_final
test_data <- subset(test_data, Gender_encoded != 2)
test_data$clary_sage_present <- apply(test_data[, grep("base_note_|middle_note_", names(test_data))], 1, function(row) {
any(grepl("clary sage", row, ignore.case = TRUE))
})
test_data$clary_sage_present <- as.numeric(test_data$clary_sage_present)
note_columns <- grep("base_note_|middle_note_", names(test_data), value = TRUE)
test_data$fir_present <- apply(test_data[, note_columns], 1, function(row) {
any(grepl("fir", row, ignore.case = TRUE))
})
test_data$peony_present <- apply(test_data[, note_columns], 1, function(row) {
any(grepl("peony", row, ignore.case = TRUE))
})
test_data$jasmine_sambac_present <- apply(test_data[, note_columns], 1, function(row) {
any(grepl("jasmine sambac", row, ignore.case = TRUE))
})
test_data$fir_present <- as.numeric(test_data$fir_present)
test_data$peony_present <- as.numeric(test_data$peony_present)
test_data$jasmine_sambac_present <- as.numeric(test_data$jasmine_sambac_present)
note_columns <- grep("base_note_|middle_note_", names(test_data), value = TRUE)
test_data$patchouli_present <- apply(test_data[, note_columns], 1, function(row) {
any(grepl("patchouli", row, ignore.case = TRUE))
})
test_data$amber_present <- apply(test_data[, note_columns], 1, function(row) {
any(grepl("amber", row, ignore.case = TRUE))
})
test_data$salwood_present <- apply(test_data[, note_columns], 1, function(row) {
any(grepl("salwood", row, ignore.case = TRUE))
})
test_data$sandalwood_present <- apply(test_data[, note_columns], 1, function(row) {
any(grepl("sandalwood", row, ignore.case = TRUE))
})
test_data$musk_present <- apply(test_data[, note_columns], 1, function(row) {
any(grepl("musk", row, ignore.case = TRUE))
})
note_vars <- c("patchouli_present", "amber_present", "salwood_present", "sandalwood_present", "musk_present")
test_data[note_vars] <- lapply(test_data[note_vars], as.numeric)
test_data$prob_final <- predict(perfume_final, newdata = test_data, type = "response")
quantile(test_data$prob_final)
test_data <- test_data[!is.na(test_data$prob_final) & !is.nan(test_data$prob_final), ]
test_data$prob_final <- predict(perfume_final, newdata = test_data, type = "response")
quantile(test_data$prob_final)
train_data$prob_final <- predict(perfume_final, newdata = train_data, type = "response")
quantile(train_data$prob_final)
test_data$Gender_encoded <- factor(test_data$Gender_encoded)
test_data$pred_final <- ifelse(test_data$prob_final > 0.5, 1, 0)
test_data$pred_final <- factor(test_data$pred_final, levels = levels(test_data$Gender_encoded))
table(test_data$pred_final)
accur_final <- 1 - mean(test_data$pred_final != test_data$Gender_encoded)
accur_final
conf_matrix <- table(Predicted = test_data$pred_final, Actual = test_data$Gender_encoded)
library(ggplot2)
conf_df <- as.data.frame(conf_matrix)
colnames(conf_df) <- c("Actual", "Predicted", "Freq")
ggplot(conf_df, aes(x = Predicted, y = Actual, fill = Freq)) +
geom_tile() +
geom_text(aes(label = Freq), color = "white", size = 6) +
labs(title = "Confusion Matrix for Perfume Gender Prediction",
x = "Predicted Gender",
y = "Actual Gender",
fill = "Frequency") +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
theme_minimal()
ggsave("perfume_confusion_matrix.png", width = 8, height = 6)
test_data$outcome <- test_data$Gender_encoded
ggplot(test_data, aes(x = prob_final, fill = outcome)) +
geom_density(alpha = 0.5) +
labs(title = "Distribution of Predicted Probabilities for Gender",
x = "Predicted Probability of Being Feminine",
y = "Density",
fill = "Actual Gender") +
theme_minimal()
ggsave("perfume_probability_distribution.png", width = 10, height = 6)
TP <- conf_matrix["1", "1"]  # True Positives
FP <- conf_matrix["1", "0"]  # False Positives
FN <- conf_matrix["0", "1"]  # False Negatives
TN <- conf_matrix["0", "0"]  # True Negatives
# Calculate Precision and Recall
precision <- TP / (TP + FP)
recall <- TP / (TP + FN)
# Calculate F1 Score
f1_score <- 2 * (precision * recall) / (precision + recall)
# Print the results
cat("Precision:", precision, "\n")
cat("Recall:", recall, "\n")
cat("F1 Score:", f1_score, "\n")
metrics_df <- data.frame(
Metric = c("Accuracy", "Precision", "Recall", "F1 Score"),
Value = c(accur_final, precision, recall, f1_score)
)
# Plot the metrics
ggplot(metrics_df, aes(x = Metric, y = Value, fill = Metric)) +
geom_bar(stat = "identity", width = 0.5) +
labs(title = "Model Performance Metrics",
y = "Value",
x = "") +
theme_minimal() +
scale_y_continuous(limits = c(0, 1)) +
geom_text(aes(label = round(Value, 3)), vjust = -0.5, size = 5)
ggsave("perfume_model_metrics.png", width = 10, height = 6)
coef_df <- data.frame(
Feature = names(coef(perfume_final)),
Coefficient = coef(perfume_final),
Abs_Coefficient = abs(coef(perfume_final))
)
# Sort by absolute coefficient value (importance)
coef_df <- coef_df %>%
arrange(desc(Abs_Coefficient))
# Plot feature importance
ggplot(coef_df, aes(x = reorder(Feature, Abs_Coefficient), y = Coefficient)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(title = "Feature Importance in Gender Prediction",
x = "Feature",
y = "Coefficient Value")
ggsave("perfume_feature_importance.png", width = 10, height = 6)
view(profumo)
ggplot(profumo, aes(x = gender)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribution of Gender", x = "Gender", y = "Count") +
theme_minimal()
profumo <- subset(profumo, Gender_encoded != 2)
ggplot(profumo, aes(x = gender)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribution of Gender", x = "Gender", y = "Count") +
theme_minimal()
ggplot(profumo, aes(x = concentrate)) +
geom_bar(fill = "skyblue", color = "orange") +
labs(title = "Distribution of concentrate", x = "Gender", y = "Count") +
theme_minimal()
ggplot(profumo, aes(x = concentration)) +
geom_bar(fill = "skyblue", color = "orange") +
labs(title = "Distribution of concentration", x = "Gender", y = "Count") +
theme_minimal()
profumo <- subset(profumo, concentration != EDC && Oil)
ggplot(profumo, aes(x = price)) +
geom_bar(fill = "skyblue", color = "red") +
labs(title = "Distribution of concentration", x = "Gender", y = "Count") +
theme_minimal()
ggplot(profumo, aes(x = concentration)) +
geom_bar(fill = "skyblue", color = "orange") +
labs(title = "Distribution of concentration", x = "concentration", y = "Count") +
theme_minimal()
ggplot(profumo, aes(x = price)) +
geom_bar(fill = "skyblue", color = "red") +
labs(title = "Distribution of price", x = "price", y = "Count") +
theme_minimal()
ggplot(profumo, aes(x = notes_diversity)) +
geom_bar(fill = "skyblue", color = "pink") +
labs(title = "Distribution of price", x = "notes count", y = "Count") +
theme_minimal()
ggplot(profumo, aes(x = notes_diversity)) +
geom_bar(fill = "skyblue", color = "pink") +
labs(title = "Distribution of notes diversity", x = "notes count", y = "Count") +
theme_minimal()
describe(profumo)
summary(profumo)
mean_price <- mean(profumo$price, na.rm = TRUE)
median_price <- median(profumo$price, na.rm = TRUE)
sd_price <- sd(profumo$price, na.rm = TRUE)
cat(“Mean Price:”, mean_price, “\nMedian Price:”, median_price, “\nSD Price:”, sd_price, “\n\n”)
cat("Mean Price:", mean_price, "\nMedian Price:", median_price, "\nSD Price:", sd_price, "\n\n")
mean_ sex <- mean(profumo$Gender_encoded, na.rm = TRUE)
mean_sex <- mean(profumo$Gender_encoded, na.rm = TRUE)
median_ sex <- median(profumo$Gender_encoded, na.rm = TRUE)
mean_sex <- mean(profumo$Gender_encoded, na.rm = TRUE)
median_sex <- median(profumo$Gender_encoded, na.rm = TRUE)
sd_sex <- sd(profumo$Gender_encoded, na.rm = TRUE)
cat("Mean Gender:", mean_sex, "\nMedian Gender:", median_sex, "\nSD Gender:", sd_sex, "\n\n")
mean_cont <- mean(profumo$scent_strength, na.rm = TRUE)
median_cont <- median(profumo$scent_strength, na.rm = TRUE)
sd_cont <- sd(profumo$scent_strength, na.rm = TRUE)
cat("Mean Concentration:", mean_cont, "\nMedian Concentration:", median_cont, "\nSD Concentration:", sd_cont, "\n\n")
mean_div <- mean(profumo$notes_diversity, na.rm = TRUE)
median_div <- median(profumo$notes_diversity, na.rm = TRUE)
sd_div <- sd(profumo$notes_diversity, na.rm = TRUE)
cat("Mean Notes Diversity:", mean_div, "\nMedian Notes Diversity:", median_div, "\nSD Notes Diversity:", sd_div, "\n\n")
CrossTable(profumo$price_normalized, profumo$notes_diversity, expected = TRUE, format = "SPSS")
